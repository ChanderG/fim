#!/usr/bin/python -u
# Note that running python with the `-u` flag is required on Windows,
# in order to ensure that stdin and stdout are opened in binary, rather
# than text, mode.

import sys, json, struct
import subprocess

# Read a message from stdin and decode it.
def getMessage():
  rawLength = sys.stdin.read(4)
  if len(rawLength) == 0:
      sys.exit(0)
  messageLength = struct.unpack('@I', rawLength)[0]
  message = sys.stdin.read(messageLength)
  return json.loads(message)

# Encode a message for transmission, given its content.
def encodeMessage(messageContent):
  encodedContent = json.dumps(messageContent)
  encodedLength = struct.pack('@I', len(encodedContent))
  return {'length': encodedLength, 'content': encodedContent}

# Send an encoded message to stdout.
def sendMessage(encodedMessage):
  sys.stdout.write(encodedMessage['length'])
  sys.stdout.write(encodedMessage['content'])
  sys.stdout.flush()

def handleSwitchTab(receivedMessage):
    """
    Unpack message and use the list as input to dmenu. Get back the result and send it back to the
    browser.
    """
    tablist = "\n".join(receivedMessage.split('\n')[1:])
    proc = subprocess.Popen(['dmenu', '-l', '10', '-p', 'Switch:'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    # proc.stdin.write(tablist)
    sel = proc.communicate(input=tablist)[0]

    sendMessage(encodeMessage("switch-tab {0}".format(sel.split('|')[0])))

def handleSearch():
    """
    Search in prev terms. Send output to ddg.
    """
    url = subprocess.check_output("sqlite3 ~/.mozilla/firefox/*.default/places.sqlite 'select url from moz_places WHERE url LIKE \"https://duckduckgo.com%\" ORDER BY frecency DESC;' | awk -F'?q=' '{print $2}' | awk -F'&t' '{print $1}' | tr + ' ' | dmenu -l 10 -i -p 'search>' | tr ' ' + ", shell=True)

    sendMessage(encodeMessage("search {0}".format(url)))

def handleHistory():
    """
    Search in history. Send output to ddg.
    """
    url = subprocess.check_output("sqlite3 -separator '  ^  ' ~/.mozilla/firefox/*.default/places.sqlite 'select url, title from moz_places order by frecency DESC;' | dmenu -l 10 -i -p 'history>' | awk  '{print $1}'", shell=True)

    sendMessage(encodeMessage("history {0}".format(url)))

while True:
  receivedMessage = getMessage()
  if (receivedMessage == "ping"):
    sendMessage(encodeMessage("pong"))
  elif receivedMessage.startswith("switch-tab"):
    handleSwitchTab(receivedMessage)
  elif (receivedMessage == "search"):
      handleSearch()
  elif (receivedMessage == "history"):
      handleHistory()
